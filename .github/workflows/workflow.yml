name: Apply New Relic Tags

on:
  workflow_dispatch:

jobs:
  apply-tags:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install cURL and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Read hostnames
        id: read_hostnames
        run: |
          hostnames=$(cat hostnames.txt)
          echo "::set-output name=hostnames::$hostnames"
          
      - name: Read tags
        id: read_tags
        run: |
          tags=$(cat tags.json)
          echo "::set-output name=tags::$tags"
          
      - name: Fetch GUIDs and Apply Tags
        env:
          NEW_RELIC_API_KEY: ${{ secrets.NEW_RELIC_API_KEY }}  # Add your API key in GitHub Secrets
        run: |
          # Fetch hostnames and tags from previous steps
          hostnames="${{ steps.read_hostnames.outputs.hostnames }}"
          tags="${{ steps.read_tags.outputs.tags }}"
                    for hostname in $hostnames; do
            # Fetch GUID for the hostname
            guid=$(curl -s -X POST https://api.newrelic.com/graphql \
              -H "Content-Type: application/json" \
              -H "API-Key: $NEW_RELIC_API_KEY" \
              --data-raw '{"query": "query { actor { entitySearch(query: \"name = '\'$hostname'\' and type like 'HOST'\") { results { entities { guid name } } } } }"}' \
              | jq -r '.data.actor.entitySearch.results.entities[0].guid')

            if [ "$guid" != "null" ]; then
              # Apply tags using the fetched GUID
              curl -X POST https://api.newrelic.com/graphql \
                -H "Content-Type: application/json" \
                -H "API-Key: $NEW_RELIC_API_KEY" \
                --data-raw '{"query": "mutation { taggingAddTagsToEntity(guid: \"'$guid'\", tags: '"$tags"') { errors { message type } } }"}'
              echo "Tags applied to $hostname ($guid)"
            else
              echo "GUID not found for hostname: $hostname"
            if
          done
